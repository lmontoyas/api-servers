// server.jsconst express = require('express');const bodyParser = require('body-parser');const db = require('./database');const app = express();app.use(bodyParser.json());// Rutas CRUD// 1. Crear un nuevo estudianteapp.post('/students', (req, res) => {    const { first_name, last_name, gender, age } = req.body;    const query = `INSERT INTO students (first_name, last_name, gender, age) VALUES (?, ?, ?, ?)`;        db.run(query, [first_name, last_name, gender, age], function (err) {        if (err) {            return res.status(500).json({ error: err.message });        }        res.status(201).json({ id: this.lastID });    });});// 2. Obtener todos los estudiantesapp.get('/students', (req, res) => {    const query = `SELECT * FROM students`;        db.all(query, [], (err, rows) => {        if (err) {            return res.status(500).json({ error: err.message });        }        res.json({ students: rows });    });});// 3. Obtener un estudiante por IDapp.get('/students/:id', (req, res) => {    const { id } = req.params;    const query = `SELECT * FROM students WHERE id = ?`;    db.get(query, [id], (err, row) => {        if (err) {            return res.status(500).json({ error: err.message });        }        if (!row) {            return res.status(404).json({ error: "Student not found" });        }        res.json({ student: row });    });});// 4. Actualizar un estudiante por IDapp.put('/students/:id', (req, res) => {    const { id } = req.params;    const { first_name, last_name, gender, age } = req.body;    const query = `UPDATE students SET first_name = ?, last_name = ?, gender = ?, age = ? WHERE id = ?`;        db.run(query, [first_name, last_name, gender, age, id], function (err) {        if (err) {            return res.status(500).json({ error: err.message });        }        if (this.changes === 0) {            return res.status(404).json({ error: "Student not found" });        }        res.json({ message: "Student updated successfully" });    });});// 5. Eliminar un estudiante por IDapp.delete('/students/:id', (req, res) => {    const { id } = req.params;    const query = `DELETE FROM students WHERE id = ?`;        db.run(query, [id], function (err) {        if (err) {            return res.status(500).json({ error: err.message });        }        if (this.changes === 0) {            return res.status(404).json({ error: "Student not found" });        }        res.json({ message: "Student deleted successfully" });    });});// Iniciar el servidorconst PORT = process.env.PORT || 3000;app.listen(PORT, () => {    console.log(`Server is running on port ${PORT}`);});